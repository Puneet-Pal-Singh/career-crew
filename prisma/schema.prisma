// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // output        = "./node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"] // Example for Alpine with OpenSSL 3
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum UserRole {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

enum JobStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

enum ApplicationStatus {
  APPLIED
  VIEWED
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
}

// --- Models ---
model User {
  id           String        @id @default(cuid())
  role         UserRole
  name         String?
  email        String        @unique
  phone        String?       @unique
  linkedin     String?       @unique
  resumeUrl    String?       @map("resume_url")
  passwordHash String        @map("password_hash")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  jobsPosted   Job[]         @relation("EmployerJobs")
  applications Application[] @relation("SeekerApplications")

  @@map("users")
}

model Job {
  id               String        @id @default(cuid())
  employerId       String        @map("employer_id")
  title            String
  companyName      String // THIS FIELD IS NOW DIRECTLY ON JOB
  description      String        @db.Text
  location         String?
  jobType          String? // THIS FIELD IS NOW DIRECTLY ON JOB
  remote           Boolean       @default(false)
  salaryMin        Float?        @map("salary_min")
  salaryMax        Float?        @map("salary_max")
  salaryCurrency   String?
  requirements     String?       @db.Text
  applicationEmail String?
  // companyLogoUrl String? // Optional: If you want to store a logo URL per job posting
  status           JobStatus     @default(PENDING)
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  employer         User          @relation("EmployerJobs", fields: [employerId], references: [id], onDelete: Cascade)
  applications     Application[] @relation("JobApplications")

  @@map("jobs")
}

model Application {
  id         String            @id @default(cuid())
  jobId      String            @map("job_id")
  seekerId   String            @map("seeker_id")
  resumeData Json?             @map("resume_data")
  status     ApplicationStatus @default(APPLIED)
  appliedAt  DateTime          @default(now()) @map("applied_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")
  job        Job               @relation("JobApplications", fields: [jobId], references: [id], onDelete: Cascade)
  seeker     User              @relation("SeekerApplications", fields: [seekerId], references: [id], onDelete: Cascade)

  @@map("applications")
}
