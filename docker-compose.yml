# docker-compose.yml

services:
  app:
    container_name: careercrew_app
    build:
      context: . 
      dockerfile: Dockerfile
      # If your Dockerfile's last stage is 'development', you don't strictly need target here.
      # But if you want to be explicit:
      # target: development 
    ports:
      - "3000:3000" 
    volumes:
      - .:/app 
      - /app/node_modules 
      - /app/.next 
    env_file:
      - .env 
    environment:
      # This DATABASE_URL is specific to the 'app' container
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public"
    depends_on:
      db:
        condition: service_healthy 
    restart: unless-stopped
    networks:
      - careercrew_network
    # Command to apply migrations and then start the dev server
    command: sh -c "echo 'Attempting to apply migrations...' && npx prisma migrate deploy && echo 'Migrations applied (or no changes). Starting dev server...' && npm run dev"

  db:
    container_name: careercrew_db
    image: postgres:15-alpine 
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: unless-stopped
    networks:
      - careercrew_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

networks:
  careercrew_network:
    driver: bridge 

volumes:
  postgres_data: